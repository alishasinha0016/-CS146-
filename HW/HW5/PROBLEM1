For each of the following recurrences, verify the answer you get by applying the master method, by solving the recurrence algebraically OR applying the recursion tree method. 

1.    T(N) = 2T(N-1) + 1
2.    T(N) = 3T(N-1) + n
3.    T(N) = 9T(N/2) + n^2
4.    T(N) = 100T(N/2) + n^logcn + 1  (c is a constant)
5.    T(N) = 4T(N/2) + n^2logn
6.    T(N) = 5T(N/2) + n^2/logn

Answers: 
First, applying Master Theorem:
It is a decreasing function.
Therefore, 
a = 2, b =1
f(N) = 1
O(f(N)*a^(N/b)) = O(1*2^N) = O(2^N)

Now, solving the equation algebriacally, we get:
1.  T(N) = 2T(N-1) + 1         eq. 1

T(N-1) = 2T(N-2) + 1           eq. 2  
T(N-2) = 2T(N-3) + 1           eq. 3
Now, stustituting eq. 3 in eq. 2, we get,

T(N-1) = 2(2T(N-3)+1) + 1
T(N-1) = 4T(N-3)+ 3             eq. 4
Now, stustituting eq. 4 in eq. 1, we get,
T(N) = 2(4T(N-3)+3)+1
T(N) = 8T(N-3)+7
Hence, we can say that,
T(N) = 2^k(N-k) + 2^k -1

When k = N, N-k = 0, so we get:
T(N) = 2^NT(0) + 2^0 + 2^1 + ... + 2^(N-1)
= 2^N + (2^N - 1)
= 2^(N+1) - 1
= O(2^N)

Hence, the time complexity for T(N) is = O(2^N).

2. T(N) = 3T(N-1) + n

First, applying Master Theorem:
It is a decreasing function.
Therefore, 
a = 3, b =1
f(N) = n
O(f(N)*a^(N/b)) = O(n*3^N) = O(n*3^N)

T(N) = 3T(N-1) + n  eq. 1
T(N-1) = 3T(N-2) + n   eq. 2
T(N-2) = 3T(N-3) + n   eq. 3

Now, substituting eq. 3 in eq. 2, we get,
T(N-1) = 3(3T(N-3)+n) +n
T(N-1) = 9T(N-3) + 4n  eq. 4

Now, substituting eq. 4 in eq. 1, we get,
T(N) = 3(9T(N-3) + 4n) + n
T(N) = 27T(N-3) + 13n
we can write it as,
T(N) = 3^kT(N-1-k) + 3^&k(k−1)+3^k−1(k−2)+...+3⋅2+ n
Therefore, the complexity is O(n*3^N)

3. T(N) = 9T(N/2) + n^2
This falls into case 1 of the Master Theorem with a=9, b=2, k =2 and f(N)=N^2. 
Because N^log⁡b(a) = N^log⁡2(9) = 2.19 > k = 2 

Therefore, the time complexity is O(N^log⁡b(a)) = O(N^log2(9)) = O(N^ln(9)).

Now, solving it using substitution method, we get;


4. T(N) = 100T(N/2) + n^logcn + 1  (c is a constant)
This falls into case 3 of the Master Theorem with a=100, b=2, and f(N)=n^logcn + 1. 
Here we can see that,
N^log⁡b(a) = N^log⁡2(100) 
= N^log⁡2(10^2) 
= N^2
Therefore, the time complexity is O(N^2log⁡N)

5. T(N) = 4T(N/2) + n^2logn
This falls into case 3 of the Master Theorem with a=4, b=2, and f(N)=n^2logn.
Now, we can see that,
N^log⁡b(a) = N^log⁡2(4) 
= N^log⁡2(2^2) 
= N^2
Therefore, the time complexity is O(N^2(log⁡N)^2)

6. T(N) = 5T(N/2) + n^2/logn
This falls into case 3 of the Master Theorem with a=5, b=2, and f(N)=n^2/logn
Now, we can see that,
N^logb(​a) = N^log2(​5), 
Therefore, the time complexity is O(N^log2(​5)).








