Let's say we have the following max heap:

       8
     /   \
    7     6
   / \   / \
  5   4 3   2

In this max heap, the root node (8) has the highest priority, followed by its children (7 and 6), and so on. We can use this max heap as a priority queue by performing operations such as insertion and extraction based on the priority.

For example, if we insert a new element with priority 9 into the max heap, it will be placed at the appropriate position to maintain the heap property:

       8
     /   \
    7     6
   / \   / \     --->    comparing 9 and 5                        
  5   4 3   2
 /
9

       8
     /   \
    7     6
   / \   / \     --->   comparing7 with 9 and 4
  9   4 3   2
 /
5

       8
     /   \
    9     6
   / \   / \     --->  comparing 8 with 9 and 6
  7   4 3   2
 /
5

       9
     /   \
    8    6
   / \   / \     ---> final
  7   4 3   2
 /
5


       9
     /   \
    8     6
   / \   / \
  7   4 3   2
 /
5

If we extract the maximum element (root), the resulting max heap will be:

       8
     /   \
    7     6  ---> swap 3 and 8
   / \   / 
  5   4 3   



       3
     /   \
    7     6. -----> remove 8
   / \   / 
  5   4 8   



       3
     /   \
    7     6. -----> remove 8
   / \   
  5   4   




    7
  /   \
 3     6.   -----> compare 3 with 7 and 6
/ \   
5   4 


    7
  /   \
 5     6.   -----> compare 3 with 5 and 4
/ \   
3  4 


    7
  /   \
 5     6.   -----> Final
/ \   
3  4 


----------------------------
A demo code that shows how, we can use Max Haep as Min Heap by negating the value:
import java.util.PriorityQueue;

class ConvertMaxHeapAsMinHeap {

    // changing the sign of the value for min heap behavior
    public void insert(int value) {
        maxHeap.add(-value); 
    }

   .
   .
   .    
   .
// Extract the value and chamge its sign again
    public int extractMin() {
        return -maxHeap.poll(); 
    }
    public boolean isEmpty() {
        return maxHeap.isEmpty();
    }
    public static void main(String[] args) {
        MaxHeapAsMinHeap minHeap = new MaxHeapAsMinHeap();
        minHeap.insert(4);
        minHeap.insert(2);
        minHeap.insert(1);
        minHeap.insert(0);
        minHeap.insert(-1);


        while (!minHeap.isEmpty()) {
            System.out.println(minHeap.extractMin());
        }
    }
}

Here, we are reversig the sign of the value while adding/inserting it into the heap. 


